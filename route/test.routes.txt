1.Project Structure:

├── api-gateway
│   ├── index.js
│   └── package.json
├── product-service
│   ├── controllers
│   │   └── productController.js
│   ├── models
│   │   └── Product.js
│   ├── routes
│   │   └── productRoutes.js
│   ├── index.js
│   └── package.json
├── order-service
│   ├── controllers
│   │   └── orderController.js
│   ├── models
│   │   └── Order.js
│   ├── routes
│   │   └── orderRoutes.js
│   ├── index.js
│   └── package.json
├── user-service
│   ├── controllers
│   │   └── userController.js
│   ├── models
│   │   └── User.js
│   ├── routes
│   │   └── userRoutes.js
│   ├── index.js
│   └── package.json
├── package.json
└── README.md

2. API Gateway:

.This service acts as the entry point for all client requests and routes them to the appropriate microservices.
.It's responsible for authentication, request routing, logging, etc.
.You can use libraries like express-gateway or implement a custom solution using Express.js.

3. Product Service:
.Manages CRUD operations for products.
.Uses MongoDB to store product data.
.Exposes RESTful endpoints for managing products.

4.Order Service:
Handles order creation, retrieval, and management.
Stores order information in MongoDB.
Exposes RESTful endpoints for order management.

5.User Service:
Manages user authentication and authorization.
Handles user registration, login, profile management, etc.
Uses MongoDB to store user data.

6.Database Layer:
MongoDB: Stores product, order, and user data.
Redis: Can be used for caching frequently accessed data like product listings or session management.


7.Authentication & Authorization:
You can implement JWT-based authentication for securing your services.
Each service can have middleware for verifying JWT tokens and authorizing requests.

8.Error Handling & Logging:
Implement error handling middleware in each service to handle errors gracefully.
Use a logging library like Winston or Bunyan to log application events.

9.Testing & Documentation:
Write unit tests and integration tests for each service.
Document API endpoints using tools like Swagger.

10.Deployment:
Deploy each service separately using containers (Docker) or serverless platforms (like AWS Lambda).
Use orchestration tools like Kubernetes for managing containers in production.


Here's a simplified example of how you might structure your product-service:

// productRoutes.js
const express = require('express');
const router = express.Router();
const productController = require('../controllers/productController');

router.get('/', productController.getAllProducts);
router.post('/', productController.createProduct);
router.get('/:productId', productController.getProductById);
router.put('/:productId', productController.updateProduct);
router.delete('/:productId', productController.deleteProduct);

module.exports = router;




// productController.js
const Product = require('../models/Product');

exports.getAllProducts = async (req, res) => {
    try {
        const products = await Product.find();
        res.json(products);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

// Implement other CRUD operations similarly


// Product.js (Mongoose schema)
const mongoose = require('mongoose');

const productSchema = new mongoose.Schema({
    name: { type: String, required: true },
    description: { type: String, required: true },
    price: { type: Number, required: true },
    // Other fields
});

module.exports = mongoose.model('Product', productSchema);




// index.js (product-service)

const express = require('express');
const mongoose = require('mongoose');
const productRoutes = require('./routes/productRoutes');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(express.json());

// Routes
app.use('/products', productRoutes);

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/ecommerce', { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => {
        console.log('Connected to MongoDB');
        // Start the server
        app.listen(PORT, () => {
            console.log(`Product service is running on port ${PORT}`);
        });
    })
    .catch((error) => {
        console.error('Error connecting to MongoDB:', error);
    });




In this example:

We import the necessary libraries (express, mongoose) and our product routes.
We create an Express application (app).
We define middleware (in this case, just express.json() to parse JSON request bodies).
We define routes for handling product-related requests.
We connect to MongoDB using Mongoose.
If the connection is successful, we start the Express server and listen on a specified port.
Each microservice (product-service, order-service, user-service) would have its own similar root file, but with its specific routes and configurations.

The api-gateway root file might look a bit different, as it would handle routing requests to the appropriate 
microservice based on the request path, among other things.


// index.js (api-gateway)

const express = require('express');
const httpProxy = require('http-proxy');
const app = express();

// Create a proxy server
const proxy = httpProxy.createProxyServer();

// Define routes to forward requests to respective microservices
app.use('/products', (req, res) => {
    proxy.web(req, res, { target: 'http://localhost:3001' }); // Forward request to product-service
});

app.use('/orders', (req, res) => {
    proxy.web(req, res, { target: 'http://localhost:3002' }); // Forward request to order-service
});

app.use('/users', (req, res) => {
    proxy.web(req, res, { target: 'http://localhost:3003' }); // Forward request to user-service
});

// Error handling for proxy server
proxy.on('error', (err, req, res) => {
    console.error('Proxy server error:', err);
    res.status(500).send('Proxy server error');
});

// Start the API Gateway
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`API Gateway is running on port ${PORT}`);
});


In this example:

We import express to create an Express application and http-proxy to create a proxy server.
We create an Express app (app).
We create a proxy server using http-proxy.
We define routes in the API Gateway that match the endpoints of the microservices (/products, /orders, /users).
Each route forwards the request to the appropriate microservice using the proxy server.
We handle errors that may occur in the proxy server.
Finally, we start the API Gateway, listening on a specified port (3000 in this case).
This setup allows the API Gateway to act as a single entry point for client requests and route them to the appropriate microservice 
based on the request path.

